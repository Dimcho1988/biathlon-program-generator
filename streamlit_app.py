
import streamlit as st
import pandas as pd
import io
import tempfile
from datetime import date
from typing import List, Dict

# –ò–º–ø–æ—Ä—Ç –æ—Ç —Ç–≤–æ—è —Ñ–∞–π–ª (—Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤ —Å—ä—â–∞—Ç–∞ –ø–∞–ø–∫–∞ –∏–ª–∏ –¥–∞ –ø–æ—Å–æ—á–∏—à –ø—Ä–∞–≤–∏–ª–µ–Ω –ø—ä—Ç)
from biathlon_program_generator_segments_taper_v2 import generate_program

st.set_page_config(page_title="Biathlon Program Generator", page_icon="üèÉ‚Äç‚ôÇÔ∏è", layout="centered")
st.title("üèÉ‚Äç‚ôÇÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ (–±–∏–∞—Ç–ª–æ–Ω)")
st.markdown("–í—ä–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∏ –Ω–∞—Ç–∏—Å–Ω–∏ **–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞**. –©–µ –ø–æ–ª—É—á–∏—à Excel –∑–∞ –∏–∑—Ç–µ–≥–ª—è–Ω–µ.")

# --- –í–•–û–î–ù–ò –î–ê–ù–ù–ò ---
vo2max = st.number_input("VO‚ÇÇmax (ml/kg/min)", min_value=30.0, max_value=95.0, value=65.0, step=0.5)

st.subheader("–°—ä—Å—Ç–µ–∑–∞–Ω–∏—è (–¥–∞—Ç–∞ + —Ç–∏–ø)")
st.caption("–î–æ–±–∞–≤—è–π —Ä–µ–¥–æ–≤–µ. –¢–∏–ø: Main start (–æ—Å–Ω–æ–≤–µ–Ω) –∏–ª–∏ Control start (–∫–æ–Ω—Ç—Ä–æ–ª–µ–Ω).")

default_rows = pd.DataFrame([
    {"date": pd.to_datetime(date.today()).date(), "type": "Main start"}
])

# –ò–∑–ø–æ–ª–∑–≤–∞–º–µ data_editor –∑–∞ –ª–µ—Å–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ/—Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ —Ä–µ–¥–æ–≤–µ.
# column_config –µ –Ω–∞–ª–∏—á–Ω–æ –≤ –ø–æ-–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ Streamlit.
try:
    starts_df = st.data_editor(
        default_rows,
        num_rows="dynamic",
        column_config={
            "date": st.column_config.DateColumn("–î–∞—Ç–∞"),
            "type": st.column_config.SelectboxColumn("–¢–∏–ø", options=["Main start", "Control start"])
        }
    )
except Exception:
    # –§–æ–ª–±–µ–∫ –∑–∞ –ø–æ-—Å—Ç–∞—Ä–∏ –≤–µ—Ä—Å–∏–∏ –Ω–∞ Streamlit
    starts_df = st.data_editor(default_rows, num_rows="dynamic")

base_file = st.file_uploader("–ö–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä. base_calendar.xlsx)", type=["xlsx"])
seed = st.number_input("Seed (–∑–∞ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç)", min_value=0, value=42, step=1)

gen_btn = st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞")

if gen_btn:
    if base_file is None:
        st.error("–ú–æ–ª—è, –∫–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (.xlsx).")
    else:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(base_file.read())
            base_path = tmp.name

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ—Ç–µ –∫—ä–º —Ñ–æ—Ä–º–∞—Ç –∑–∞ generate_program
            starts: List[Dict] = []
            for _, row in starts_df.iterrows():
                d = pd.to_datetime(row.get("date")).date()
                t = str(row.get("type", "Main start"))
                starts.append({"date": d.isoformat(), "type": t})

            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞
            df = generate_program(vo2max=vo2max, starts=starts, seed=seed, base_path=base_path)

            st.success("–ì–æ—Ç–æ–≤–æ! –ò–∑—Ç–µ–≥–ª–∏ Excel —Ñ–∞–π–ª–∞ –æ—Ç–¥–æ–ª—É.")
            buf = io.BytesIO()
            df.to_excel(buf, index=False)
            buf.seek(0)
            st.download_button(
                "üì• –ò–∑—Ç–µ–≥–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ (Excel)",
                data=buf,
                file_name="generated_program.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            with st.expander("–ü—Ä–µ–≥–ª–µ–¥ (–ø—ä—Ä–≤–∏—Ç–µ 30 —Ä–µ–¥–∞)"):
                st.dataframe(df.head(30))

        except Exception as e:
            st.error(f"–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            st.exception(e)
