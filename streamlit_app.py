# Create an updated Streamlit app that adds weekly plan, notes, and methods (BG terminology).
from pathlib import Path
from textwrap import dedent

code = dedent('''
import streamlit as st
import pandas as pd
import io
import tempfile
from typing import List, Dict

# –ò–º–ø–æ—Ä—Ç –Ω–∞ —Ç–≤–æ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤ —Å—ä—â–∞—Ç–∞ –ø–∞–ø–∫–∞ –≤ —Ä–µ–ø–æ—Ç–æ)
from biathlon_program_generator_segments_taper_v2 import generate_program

st.set_page_config(page_title="onFlows Biathlon Generator", page_icon="üèîÔ∏è", layout="wide")
st.title("üèîÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ (–±–∏–∞—Ç–ª–æ–Ω) ‚Äî —Ä–∞–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è")

st.markdown(
    "–í—ä–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –∫–∞—á–∏ **base_calendar.xlsx** –∏ –Ω–∞—Ç–∏—Å–Ω–∏ **–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞**. "
    "–©–µ –ø–æ–ª—É—á–∏—à —Ä–∞–∑—à–∏—Ä–µ–Ω Excel —Å –Ω—è–∫–æ–ª–∫–æ –ª–∏—Å—Ç–∞: `Program`, `WeekPlan`, `Notes`, `Methods`."
)

# ---------- –í–•–û–î ----------
col1, col2 = st.columns([1,1])
with col1:
    vo2max = st.number_input("VO‚ÇÇmax (ml/kg/min)", min_value=30.0, max_value=95.0, value=65.0, step=0.5)
with col2:
    seed = st.number_input("Seed (–∑–∞ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç)", min_value=0, value=42, step=1)

st.subheader("–°—ä—Å—Ç–µ–∑–∞–Ω–∏—è (–¥–∞—Ç–∞ + —Ç–∏–ø)")
st.caption("–î–æ–±–∞–≤—è–π —Ä–µ–¥–æ–≤–µ. –¢–∏–ø: Main start (–æ—Å–Ω–æ–≤–µ–Ω) –∏–ª–∏ Control start (–∫–æ–Ω—Ç—Ä–æ–ª–µ–Ω).")

default_rows = pd.DataFrame([
    {"date": pd.Timestamp.today().date(), "type": "Main start"}
])

# –ó–∞ –ø–æ-—Å—Ç–∞—Ä Streamlit –ø—Ä–∞–≤–∏–º –∑–∞—â–∏—Ç–µ–Ω fall-back
try:
    starts_df = st.data_editor(
        default_rows,
        num_rows="dynamic",
        column_config={
            "date": st.column_config.DateColumn("–î–∞—Ç–∞"),
            "type": st.column_config.SelectboxColumn("–¢–∏–ø", options=["Main start", "Control start"])
        }
    )
except Exception:
    starts_df = st.data_editor(default_rows, num_rows="dynamic")

base_file = st.file_uploader("–ö–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä. base_calendar.xlsx)", type=["xlsx"])
out_name = st.text_input("–ò–º–µ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏—è —Ñ–∞–π–ª (–±–µ–∑ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ)", value="generated_program_extended")

gen_btn = st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞", type="primary")

# ---------- –õ–û–ì–ò–ö–ê ----------

def ensure_columns(df: pd.DataFrame) -> pd.DataFrame:
    # –ü—Ä–µ-–ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ Date
    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"])
    else:
        # –∞–∫–æ –Ω—è–º–∞ Date, –æ–ø–∏—Ç–≤–∞–º–µ –¥–∞ –ø–æ—Å—Ç—Ä–æ–∏–º –æ—Ç Week/Day, –Ω–æ –≤ –æ–±—â–∏—è —Å–ª—É—á–∞–π generator –æ—á–∞–∫–≤–∞ Date –≤ base
        # —Ç—É–∫ —Å–∞–º–æ —Å—ä–∑–¥–∞–≤–∞–º–µ placeholder (—â–µ –µ –≤–∞–ª–∏–¥–µ–Ω –∞–∫–æ generator –≤–µ—á–µ –µ —Å—ä–∑–¥–∞–ª Date)
        pass

    # Day (Mon..Sun)
    if "Day" not in df.columns:
        if "Date" in df.columns:
            df["Day"] = df["Date"].dt.day_name()
        else:
            df["Day"] = ""

    # Week (1..N)
    if "Week" not in df.columns:
        if "Date" in df.columns:
            start = df["Date"].min()
            df["Week"] = ((df["Date"] - start).dt.days // 7) + 1
        else:
            df["Week"] = 1

    return df

def augment_with_notes(df: pd.DataFrame) -> pd.DataFrame:
    # –ú–∞–ø–∏–Ω–≥ –Ω–∞ –∑–æ–Ω–∏ –∫—ä–º —Ç–≤–æ—è—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è
    # 1: –ö–†, 2: –ê–†1, 3: –ê–†2, 4: –°–†, 5: –ê–ù–ü
    zone_to_label = {1: "–ö–†", 2: "–ê–†1", 3: "–ê–†2", 4: "–°–†", 5: "–ê–ù–ü"}

    method_by_zone = {
        1: "–ó–æ–Ω–∞ 1 (–ö–†): –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª–Ω–∞ –∞–µ—Ä–æ–±–Ω–∞ —Ä–∞–±–æ—Ç–∞, –Ω–∏—Å–∫–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ —Ç–µ–º–ø–æ.",
        2: "–ó–æ–Ω–∞ 2 (–ê–†1): —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ –∞–µ—Ä–æ–±–Ω–∞ –±–∞–∑–∞; –¥—ä–ª–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∏ –Ω–∞—Ç–æ–≤–∞—Ä–≤–∞–Ω–∏—è.",
        3: "–ó–æ–Ω–∞ 3 (–ê–†2): –ø—Ä–∞–≥–æ–≤–∞ –∑–æ–Ω–∞; –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 6‚Äì12 –º–∏–Ω, —Å—Ç–∞–±–∏–ª–Ω–æ —Ç–µ–º–ø–æ.",
        4: "–ó–æ–Ω–∞ 4 (–°–†): –±–ª–∏–∑–æ –¥–æ —Å—ä—Å—Ç–µ–∑–∞—Ç–µ–ª–Ω–∞; –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 3‚Äì6 –º–∏–Ω, —Ñ–æ–∫—É—Å –≤—ä—Ä—Ö—É –∏–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç.",
        5: "–ó–æ–Ω–∞ 5 (–ê–ù–ü): –≤–∏—Å–æ–∫–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç/VO‚ÇÇmax; 30\"‚Äì3' –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å –ø—ä–ª–Ω–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ.",
    }

    # –°–∏–ª–æ–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äì –ø–æ –∏–∑–±–æ—Ä –º–æ–∂–µ –¥–∞ –¥–æ–π–¥–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞; —Ç—É–∫ –¥–æ–±–∞–≤—è–º–µ default –∫–æ–ª–æ–Ω–∞ –∞–∫–æ –ª–∏–ø—Å–≤–∞
    if "Strength" not in df.columns:
        df["Strength"] = ""  # –ø—Ä–∏–º–µ—Ä: "–û–°–ü" / "–°–°–ü" / ""

    # –°—ä–∑–¥–∞–≤–∞–º–µ —á–µ—Ç–∏–º –µ—Ç–∏–∫–µ—Ç –∑–∞ –∑–æ–Ω–∞
    if "Zone" in df.columns:
        df["ZoneLabel"] = df["Zone"].apply(lambda z: zone_to_label.get(int(z), str(z)) if pd.notna(z) else "")
    else:
        df["ZoneLabel"] = ""

    def build_note(row):
        z = int(row.get("Zone", 0)) if pd.notna(row.get("Zone", None)) else 0
        mins = int(row.get("Minutes", 0)) if pd.notna(row.get("Minutes", None)) else 0
        strength = row.get("Strength", "")
        base = method_by_zone.get(z, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–æ–Ω–∞ –Ω–µ –µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–æ.")
        extra = []
        if mins:
            extra.append(f"~{mins} –º–∏–Ω.")
        if strength:
            extra.append(f"–°–∏–ª–∞: {strength}.")
        extra_txt = " " + " ".join(extra) if extra else ""
        return f"{base}{extra_txt}"

    df["Note"] = df.apply(build_note, axis=1)
    return df

if gen_btn:
    if base_file is None:
        st.error("–ú–æ–ª—è, –∫–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (.xlsx).")
    else:
        # –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∏—Å–≤–∞–º–µ –∫–∞—á–µ–Ω–∏—è Excel, –∑–∞—â–æ—Ç–æ generator –æ—á–∞–∫–≤–∞ –ø—ä—Ç –¥–æ —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(base_file.read())
            base_path = tmp.name

        try:
            # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–µ—Ç–µ
            starts: List[Dict] = []
            for _, row in starts_df.iterrows():
                d = pd.to_datetime(row.get("date")).date()
                t = str(row.get("type", "Main start"))
                starts.append({"date": d.isoformat(), "type": t})

            # –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
            df = generate_program(vo2max=vo2max, starts=starts, seed=seed, base_path=base_path)
            df = ensure_columns(df)

            # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            day_order = {"Monday":1,"Tuesday":2,"Wednesday":3,"Thursday":4,"Friday":5,"Saturday":6,"Sunday":7,
                         "Mon":1,"Tue":2,"Wed":3,"Thu":4,"Fri":5,"Sat":6,"Sun":7}
            if "Day" in df.columns:
                df["Day_order"] = df["Day"].map(day_order).fillna(8)
            else:
                df["Day_order"] = 8

            df = df.sort_values(["Week","Day_order","Date"], ascending=[True,True,True])
            df = augment_with_notes(df)

            # —Å–µ–¥–º–∏—á–µ–Ω –ø–ª–∞–Ω (—á–µ—Ç–∏–º –≤–∏–¥)
            cols = ["Week","Date","Day","Zone","ZoneLabel","Minutes","Strength","Note"]
            week_plan = df[[c for c in cols if c in df.columns]].copy()

            # –∫–∞—Ç–∞–ª–æ–≥ —Å –º–µ—Ç–æ–¥–∏
            methods = pd.DataFrame([
                {"Zone":"–ö–† (1)", "Method":"–í—ä–∑—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª–Ω–∏ L1 —Å–µ—Å–∏–∏; –¥—ä–ª–∂–∏–Ω–∞ —Å–ø–æ—Ä–µ–¥ –æ–±—â–∏—è –æ–±–µ–º."},
                {"Zone":"–ê–†1 (2)", "Method":"–ê–µ—Ä–æ–±–Ω–∞ –±–∞–∑–∞; –¥—ä–ª–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∏ –±—è–≥–∞–Ω–∏—è/—Ä–æ–ª–∫–∏; HR 60‚Äì75% HRmax."},
                {"Zone":"–ê–†2 (3)", "Method":"–ü—Ä–∞–≥–æ–≤–∞ —Ä–∞–±–æ—Ç–∞; 3√ó10' / 4√ó8' —Å 2‚Äì3' –ø–∞—É–∑–∞; HR 81‚Äì88% HRmax."},
                {"Zone":"–°–† (4)", "Method":"–°—ä—Å—Ç–µ–∑–∞—Ç–µ–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç; 5√ó4' / 6√ó3' —Å 2‚Äì3' –ø–∞—É–∑–∞; HR 89‚Äì95% HRmax."},
                {"Zone":"–ê–ù–ü (5)", "Method":"VO‚ÇÇmax –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏; 8√ó1' / 12√ó400–º; –ø—ä–ª–Ω–∞ –ø–æ—á–∏–≤–∫–∞; –Ω–∞–¥ 95% HRmax."},
                {"Zone":"–°–∏–ª–∞", "Method":"–û–°–ü/–°–°–ü 2‚Äì3x —Å–µ–¥–º–∏—á–Ω–æ; –∏–∑–±—è–≥–≤–∞–π –≤ –¥–µ–Ω—è –ø—Ä–µ–¥–∏ –∫–ª—é—á–æ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏."},
                {"Zone":"–°—Ç—Ä–µ–ª–±–∞", "Method":"–°—É—Ö–∞/–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Å–ø–æ—Ä–µ–¥ –¥–µ–Ω—è; –æ—Ç–¥–µ–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ —Ç–≤–æ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç."},
            ])

            # –ü–æ–∫–∞–∑–≤–∞–Ω–µ
            st.success("–ì–æ—Ç–æ–≤–æ! –í–∏–∂ –ø—Ä–µ–≥–ª–µ–¥–∞ –∏ —Å–≤–∞–ª–∏ Excel.")
            with st.expander("–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—è –ø–ª–∞–Ω (–ø—ä—Ä–≤–∏—Ç–µ 60 —Ä–µ–¥–∞)"):
                st.dataframe(week_plan.head(60))

            # –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ Excel —Å –º–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            from pandas import ExcelWriter
            buf = io.BytesIO()
            with ExcelWriter(buf, engine="openpyxl") as writer:
                df.drop(columns=["Day_order"], errors="ignore").to_excel(writer, index=False, sheet_name="Program")
                week_plan.to_excel(writer, index=False, sheet_name="WeekPlan")
                pd.DataFrame({"Notes":[
                    "–ë–µ–ª–µ–∂–∫–∏:",
                    "- –ó–∞–≥—Ä—è–≤–∫–∞ 15‚Äì20', —Ä–∞–∑–ø—É—Å–∫–∞–Ω–µ 10‚Äì15'.",
                    "- –ö–æ–Ω—Ç—Ä–æ–ª –Ω–∞ —É–º–æ—Ä–∞: HRV, RPE, —Å—É—Ç—Ä–µ—à–µ–Ω –ø—É–ª—Å; –∏–∑–±–µ–≥–Ω–∏ –Ω–∞—Ç—Ä—É–ø–≤–∞–Ω–µ –Ω–∞ –≤–∏—Å–æ–∫ –ª–∞–∫—Ç–∞—Ç.",
                    "- –ù–µ –ø–æ–¥—Ä–µ–∂–¥–∞–π —Ç–µ–∂–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–Ω–∏.",
                    "- –°–∏–ª–∞: –û–°–ü/–°–°–ü —Å–ø–æ—Ä–µ–¥ —Ñ–∞–∑–∞—Ç–∞; –Ω–µ –ø—Ä–µ—Ç–æ–≤–∞—Ä–≤–∞–π –ø—Ä–∏ –≤–∏—Å–æ–∫ —Å—Ç—Ä–µ—Å –≤ –ó4‚Äì–ó5."
                ]}).to_excel(writer, index=False, sheet_name="Notes")
                methods.to_excel(writer, index=False, sheet_name="Methods")
            buf.seek(0)

            safe_name = (out_name or "generated_program_extended").strip().replace(" ","_")
            st.download_button(
                "üì• –ò–∑—Ç–µ–≥–ª–∏ —Ä–∞–∑—à–∏—Ä–µ–Ω Excel (–º–Ω–æ–≥–æ –ª–∏—Å—Ç–∞)",
                data=buf,
                file_name=f"{safe_name}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f"–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            st.exception(e)
''')

out_path = Path("/mnt/data/streamlit_app_extended.py")
out_path.write_text(code, encoding="utf-8")
out_path.as_posix()
