import streamlit as st
import pandas as pd
import io, tempfile
from typing import List, Dict

# –í–ê–ñ–ù–û: —Ñ–∞–π–ª—ä—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤ —Å—ä—â–∞—Ç–∞ –ø–∞–ø–∫–∞ –∏ –¥–∞ —Å–µ –∫–∞–∑–≤–∞ —Ç–∞–∫–∞:
from biathlon_program_generator_segments_taper_v2 import generate_program

st.set_page_config(page_title="onFlows Biathlon Generator", page_icon="üèîÔ∏è", layout="wide")
st.title("üèîÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ (–±–∏–∞—Ç–ª–æ–Ω) ‚Äî —Ä–∞–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å–∏—è")

st.markdown(
    "–í—ä–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –∫–∞—á–∏ **base_calendar.xlsx** –∏ –Ω–∞—Ç–∏—Å–Ω–∏ **–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞**. "
    "–©–µ –ø–æ–ª—É—á–∏—à —Ä–∞–∑—à–∏—Ä–µ–Ω Excel —Å –ª–∏—Å—Ç–æ–≤–µ: `Program`, `WeekPlan`, `Notes`, `Methods`."
)

# ---------------- –í–•–û–î ----------------
col1, col2 = st.columns([1,1])
with col1:
    vo2max = st.number_input("VO‚ÇÇmax (ml/kg/min)", min_value=30.0, max_value=95.0, value=65.0, step=0.5)
with col2:
    seed = st.number_input("Seed (–∑–∞ –≤—ä–∑–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç)", min_value=0, value=42, step=1)

st.subheader("–°—ä—Å—Ç–µ–∑–∞–Ω–∏—è (–¥–∞—Ç–∞ + —Ç–∏–ø)")
st.caption("–î–æ–±–∞–≤—è–π —Ä–µ–¥–æ–≤–µ. –¢–∏–ø: Main start (–æ—Å–Ω–æ–≤–µ–Ω) –∏–ª–∏ Control start (–∫–æ–Ω—Ç—Ä–æ–ª–µ–Ω).")

default_rows = pd.DataFrame([{"date": pd.Timestamp.today().date(), "type": "Main start"}])
try:
    starts_df = st.data_editor(
        default_rows,
        num_rows="dynamic",
        column_config={
            "date": st.column_config.DateColumn("–î–∞—Ç–∞"),
            "type": st.column_config.SelectboxColumn("–¢–∏–ø", options=["Main start", "Control start"]),
        },
    )
except Exception:
    starts_df = st.data_editor(default_rows, num_rows="dynamic")

base_file = st.file_uploader("–ö–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä. base_calendar.xlsx)", type=["xlsx"])
out_name = st.text_input("–ò–º–µ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏—è —Ñ–∞–π–ª (–±–µ–∑ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ)", value="generated_program_extended")

gen_btn = st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–∞", type="primary")

# ---------------- –ü–û–ú–û–©–ù–ò –§–£–ù–ö–¶–ò–ò ----------------
def ensure_columns(df: pd.DataFrame) -> pd.DataFrame:
    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"])
    if "Day" not in df.columns:
        if "Date" in df.columns:
            df["Day"] = df["Date"].dt.day_name()
        else:
            df["Day"] = ""
    if "Week" not in df.columns:
        if "Date" in df.columns:
            start = df["Date"].min()
            df["Week"] = ((df["Date"] - start).dt.days // 7) + 1
        else:
            df["Week"] = 1
    return df

def augment_with_notes(df: pd.DataFrame) -> pd.DataFrame:
    zone_to_label = {1: "–ö–†", 2: "–ê–†1", 3: "–ê–†2", 4: "–°–†", 5: "–ê–ù–ü"}
    method_by_zone = {
        1: "–ó–æ–Ω–∞ 1 (–ö–†): –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª–Ω–∞ –∞–µ—Ä–æ–±–Ω–∞ —Ä–∞–±–æ—Ç–∞, –Ω–∏—Å–∫–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ —Ç–µ–º–ø–æ.",
        2: "–ó–æ–Ω–∞ 2 (–ê–†1): —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ –∞–µ—Ä–æ–±–Ω–∞ –±–∞–∑–∞; –¥—ä–ª–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∏ –Ω–∞—Ç–æ–≤–∞—Ä–≤–∞–Ω–∏—è.",
        3: "–ó–æ–Ω–∞ 3 (–ê–†2): –ø—Ä–∞–≥–æ–≤–∞ –∑–æ–Ω–∞; –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 6‚Äì12 –º–∏–Ω, —Å—Ç–∞–±–∏–ª–Ω–æ —Ç–µ–º–ø–æ.",
        4: "–ó–æ–Ω–∞ 4 (–°–†): –±–ª–∏–∑–æ –¥–æ —Å—ä—Å—Ç–µ–∑–∞—Ç–µ–ª–Ω–∞; –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 3‚Äì6 –º–∏–Ω, —Ñ–æ–∫—É—Å –≤—ä—Ä—Ö—É –∏–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç.",
        5: "–ó–æ–Ω–∞ 5 (–ê–ù–ü): –≤–∏—Å–æ–∫–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç/VO‚ÇÇmax; 30‚Äú‚Äì3‚Äô –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å –ø—ä–ª–Ω–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ.",
    }
    if "Strength" not in df.columns:
        df["Strength"] = ""
    if "Zone" in df.columns:
        df["ZoneLabel"] = df["Zone"].apply(lambda z: zone_to_label.get(int(z), str(z)) if pd.notna(z) else "")
    else:
        df["ZoneLabel"] = ""

    def build_note(row):
        z = int(row.get("Zone", 0)) if pd.notna(row.get("Zone", None)) else 0
        mins = int(row.get("Minutes", 0)) if pd.notna(row.get("Minutes", None)) else 0
        strength = row.get("Strength", "")
        base = method_by_zone.get(z, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–æ–Ω–∞ –Ω–µ –µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–æ.")
        extra = []
        if mins: extra.append(f"~{mins} –º–∏–Ω.")
        if strength: extra.append(f"–°–∏–ª–∞: {strength}.")
        return f"{base} " + " ".join(extra) if extra else base

    df["Note"] = df.apply(build_note, axis=1)
    return df

# ---------------- –ò–ó–ü–™–õ–ù–ï–ù–ò–ï ----------------
if gen_btn:
    if base_file is None:
        st.error("–ú–æ–ª—è, –∫–∞—á–∏ –±–∞–∑–æ–≤–∏—è Excel —à–∞–±–ª–æ–Ω (.xlsx).")
    else:
        # –ü–∏—à–µ–º –∫–∞—á–µ–Ω–∏—è —Ñ–∞–π–ª –≤—ä–≤ –≤—Ä–µ–º–µ–Ω–µ–Ω –ø—ä—Ç, –∑–∞—â–æ—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ä—Ç –∏—Å–∫–∞ path
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(base_file.read())
            base_path = tmp.name

        try:
            starts: List[Dict] = []
            for _, row in starts_df.iterrows():
                d = pd.to_datetime(row.get("date")).date()
                t = str(row.get("type", "Main start"))
                starts.append({"date": d.isoformat(), "type": t})

            df = generate_program(vo2max=vo2max, starts=starts, seed=seed, base_path=base_path)
            df = ensure_columns(df)

            day_order = {
                "Monday":1,"Tuesday":2,"Wednesday":3,"Thursday":4,"Friday":5,"Saturday":6,"Sunday":7,
                "Mon":1,"Tue":2,"Wed":3,"Thu":4,"Fri":5,"Sat":6,"Sun":7
            }
            df["Day_order"] = df.get("Day", "").map(day_order) if "Day" in df.columns else 8
            df = df.sort_values(["Week","Day_order","Date"], ascending=[True, True, True], na_position="last")
            df = augment_with_notes(df)

            cols = ["Week","Date","Day","Zone","ZoneLabel","Minutes","Strength","Note"]
            week_plan = df[[c for c in cols if c in df.columns]].copy()

            methods = pd.DataFrame([
                {"Zone":"–ö–† (1)", "Method":"–í—ä–∑—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª–Ω–∏ L1; –¥—ä–ª–∂–∏–Ω–∞ —Å–ø–æ—Ä–µ–¥ –æ–±—â–∏—è –æ–±–µ–º."},
                {"Zone":"–ê–†1 (2)", "Method":"–ê–µ—Ä–æ–±–Ω–∞ –±–∞–∑–∞; –¥—ä–ª–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∏ –±—è–≥–∞–Ω–∏—è/—Ä–æ–ª–∫–∏; HR 60‚Äì75% HRmax."},
                {"Zone":"–ê–†2 (3)", "Method":"–ü—Ä–∞–≥–æ–≤–∞ —Ä–∞–±–æ—Ç–∞; 3√ó10' / 4√ó8' —Å 2‚Äì3' –ø–∞—É–∑–∞; HR 81‚Äì88% HRmax."},
                {"Zone":"–°–† (4)", "Method":"–°—ä—Å—Ç–µ–∑–∞—Ç–µ–ª–Ω–∞; 5√ó4' / 6√ó3' —Å 2‚Äì3' –ø–∞—É–∑–∞; HR 89‚Äì95% HRmax."},
                {"Zone":"–ê–ù–ü (5)", "Method":"VO‚ÇÇmax; 8√ó1' / 12√ó400–º; –ø—ä–ª–Ω–∞ –ø–æ—á–∏–≤–∫–∞; >95% HRmax."},
                {"Zone":"–°–∏–ª–∞", "Method":"–û–°–ü/–°–°–ü 2‚Äì3x —Å–µ–¥–º–∏—á–Ω–æ; –∏–∑–±—è–≥–≤–∞–π –ø—Ä–µ–¥–∏ –∫–ª—é—á–æ–≤–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏."},
                {"Zone":"–°—Ç—Ä–µ–ª–±–∞", "Method":"–°—É—Ö–∞/–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞; –æ—Ç–¥–µ–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ —Ç–≤–æ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç."},
            ])

            st.success("–ì–æ—Ç–æ–≤–æ! –í–∏–∂ –ø—Ä–µ–≥–ª–µ–¥–∞ –∏ —Å–≤–∞–ª–∏ Excel.")
            with st.expander("–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏—è –ø–ª–∞–Ω (–ø—ä—Ä–≤–∏—Ç–µ 60 —Ä–µ–¥–∞)"):
                st.dataframe(week_plan.head(60))

            # –°–≤–∞–ª—è–Ω–µ –Ω–∞ Excel (–º–Ω–æ–≥–æ –ª–∏—Å—Ç–∞) –±–µ–∑ –∑–∞–ø–∏—Å –Ω–∞ –¥–∏—Å–∫
            from pandas import ExcelWriter
            buf = io.BytesIO()
            with ExcelWriter(buf, engine="openpyxl") as writer:
                df.drop(columns=["Day_order"], errors="ignore").to_excel(writer, index=False, sheet_name="Program")
                week_plan.to_excel(writer, index=False, sheet_name="WeekPlan")
                pd.DataFrame({"Notes":[
                    "–ë–µ–ª–µ–∂–∫–∏:",
                    "- –ó–∞–≥—Ä—è–≤–∫–∞ 15‚Äì20', —Ä–∞–∑–ø—É—Å–∫–∞–Ω–µ 10‚Äì15'.",
                    "- –ö–æ–Ω—Ç—Ä–æ–ª –Ω–∞ —É–º–æ—Ä–∞: HRV, RPE, —Å—É—Ç—Ä–µ—à–µ–Ω –ø—É–ª—Å; –∏–∑–±—è–≥–≤–∞–π –Ω–∞—Ç—Ä—É–ø–≤–∞–Ω–µ –Ω–∞ –≤–∏—Å–æ–∫ –ª–∞–∫—Ç–∞—Ç.",
                    "- –ù–µ –ø–æ–¥—Ä–µ–∂–¥–∞–π —Ç–µ–∂–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏ –¥–Ω–∏.",
                    "- –°–∏–ª–∞: –û–°–ü/–°–°–ü —Å–ø–æ—Ä–µ–¥ —Ñ–∞–∑–∞—Ç–∞; –Ω–µ –ø—Ä–µ—Ç–æ–≤–∞—Ä–≤–∞–π –ø—Ä–∏ –≤–∏—Å–æ–∫ —Å—Ç—Ä–µ—Å –≤ –ó4‚Äì–ó5.",
                ]}).to_excel(writer, index=False, sheet_name="Notes")
                methods.to_excel(writer, index=False, sheet_name="Methods")
            buf.seek(0)

            fname = (out_name or "generated_program_extended").strip().replace(" ", "_") + ".xlsx"
            st.download_button(
                "üì• –ò–∑—Ç–µ–≥–ª–∏ —Ä–∞–∑—à–∏—Ä–µ–Ω Excel (–º–Ω–æ–≥–æ –ª–∏—Å—Ç–∞)",
                data=buf,
                file_name=fname,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        except Exception as e:
            st.error(f"–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
            st.exception(e)
# ---------------- DEMO: –ú–æ–¥–µ–ª–∏ (CS & ACWR) –∏ –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ ----------------
import io

st.markdown("---")
with st.expander("üß™ –ú–æ–¥–µ–ª–∏ (CS & ACWR) ‚Äì –¥–µ–º–æ (–∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ)", expanded=False):
    # –ò–º–ø–æ—Ä—Ç –Ω–∞ —Ç–≤–æ–∏—Ç–µ –Ω–æ–≤–∏ –º–æ–¥—É–ª–∏
    from cs_model import compute_cs
    from acwr_model import compute_acwr
    from generator import generate_plan as gen_simple_plan

    st.subheader("Critical Speed –æ—Ç –¥–≤–∞ TT —Ç–µ—Å—Ç–∞")
    c1, c2, c3, c4 = st.columns(4)
    d1 = c1.number_input("TT1 –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)", min_value=100, max_value=20000, value=1200, step=100)
    t1 = c2.number_input("TT1 –≤—Ä–µ–º–µ (—Å–µ–∫.)",  min_value=60,  max_value=7200,  value=240,  step=10)
    d2 = c3.number_input("TT2 –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º)", min_value=200, max_value=50000, value=3000, step=100)
    t2 = c4.number_input("TT2 –≤—Ä–µ–º–µ (—Å–µ–∫.)",  min_value=120, max_value=14400, value=720,  step=10)

    if st.button("–ò–∑—á–∏—Å–ª–∏ CS", key="btn_cs"):
        cs_calc = compute_cs([{"distance": d1, "time": t1}, {"distance": d2, "time": t2}])["cs"]
        st.session_state["demo_cs"] = cs_calc

    cs_val = st.session_state.get("demo_cs", None)
    if cs_val:
        st.metric("Critical Speed", f"{cs_val:.2f} km/h")

    st.subheader("ACWR –æ—Ç –∏—Å—Ç–æ—Ä–∏—è (Excel —Å –∫–æ–ª–æ–Ω–∞ 'Minutes')")
    acwr_file = st.file_uploader("–ö–∞—á–∏ –∏—Å—Ç–æ—Ä–∏—è (.xlsx)", type=["xlsx"], key="acwr_hist")
    acwr_val = None
    if acwr_file:
        hist_df = pd.read_excel(acwr_file)
        if "Minutes" in hist_df.columns:
            acwr_val = compute_acwr(hist_df)["acwr"]
            st.metric("ACWR", f"{acwr_val:.2f}" if acwr_val else "n/a")
            st.caption("–ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 28 —Ä–µ–¥–∞ (–∞–∫–æ –∏–º–∞):")
            st.dataframe(hist_df.tail(28))
        else:
            st.error("–§–∞–π–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –∫–æ–ª–æ–Ω–∞ 'Minutes'.")

    st.subheader("–ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ CS + ACWR ‚Üí –¥–µ–º–æ –ø–ª–∞–Ω")
    if cs_val and acwr_val is not None:
        demo_base = pd.DataFrame({
            "Week": [1,1,1,1,1],
            "Day":  ["Mon","Tue","Wed","Thu","Fri"],
            "Zone": [1,2,3,4,5],
            "Minutes": [60,50,45,40,30]
        })
        plan = gen_simple_plan(cs_val, acwr_val, demo_base)
        st.dataframe(plan)

        buf = io.BytesIO()
        plan.to_excel(buf, index=False)
        buf.seek(0)
        st.download_button(
            "üì• –°–≤–∞–ª–∏ –¥–µ–º–æ –ø–ª–∞–Ω–∞ (Excel)",
            data=buf,
            file_name="demo_plan_cs_acwr.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.caption("–í—ä–≤–µ–¥–∏ CS (–±—É—Ç–æ–Ω ‚Äû–ò–∑—á–∏—Å–ª–∏ CS‚Äú) –∏ –∫–∞—á–∏ Excel –∏—Å—Ç–æ—Ä–∏—è –∑–∞ ACWR, –∑–∞ –¥–∞ –≤–∏–¥–∏—à –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω –ø–ª–∞–Ω.")
